// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("users")
}

model Service {
  id    String @id @default(uuid())
  name  String
  // Optionally: imageUrl, description, etc.
  bookings BookingService[]
}

model EventType {
  id    String @id @default(uuid())
  name  String
  // Optionally: imageUrl, description, etc.
  bookings BookingEvent[]
}

model Booking {
  id         String   @id @default(uuid())
  name       String
  mobile     String
  email      String
  gst        String?
  paxCount   Int
  attendants Int?
  toilets    Int?
  location   String?
  startDate  DateTime
  endDate    DateTime
  startTime  String?
  endTime    String?
  createdAt  DateTime @default(now())

  // Relations
  services   BookingService[]
  events     BookingEvent[]
}

model BookingService {
  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId String
  service   Service @relation(fields: [serviceId], references: [id])
  serviceId String

  @@id([bookingId, serviceId])
}

model BookingEvent {
  booking   Booking @relation(fields: [bookingId], references: [id])
  bookingId String
  eventType EventType @relation(fields: [eventTypeId], references: [id])
  eventTypeId String

  @@id([bookingId, eventTypeId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?    // For future user authentication
  sessionId String?    // For guest carts
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  items     CartItem[]
  order     Order?
}

model CartItem {
  id          String   @id @default(uuid())
  cartId      String
  productId   String   // Frontend product ID
  productName String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  originalPrice Decimal? @db.Decimal(10, 2)
  imageUrl    String?
  quantity    Int
  createdAt   DateTime @default(now())

  cart        Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)

  @@unique([cartId, productId])
}

model Order {
  id            String   @id @default(uuid())
  cartId        String   @unique
  customerName  String
  customerEmail String
  customerPhone String
  totalAmount   Decimal  @db.Decimal(10, 2)
  status        OrderStatus @default(PENDING)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  cart          Cart     @relation(fields: [cartId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id            String   @id @default(uuid())
  orderId       String
  productId     String   // Frontend product ID
  productName   String
  description   String?
  price         Decimal  @db.Decimal(10, 2)
  originalPrice Decimal? @db.Decimal(10, 2)
  imageUrl      String?
  quantity      Int
  createdAt     DateTime @default(now())

  order         Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}