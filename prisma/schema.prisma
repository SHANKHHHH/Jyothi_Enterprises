generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  directUrl    = env("DIRECT_URL")
  relationMode = "prisma"
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  passwordHash String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("users")
}

model Service {
  id       String           @id @default(uuid())
  name     String
  bookings BookingService[]
}

model EventType {
  id       String         @id @default(uuid())
  name     String
  bookings BookingEvent[]
}

model Product {
  id            String      @id @default(uuid())
  name          String
  description   String?
  price         Decimal     @db.Decimal(10, 2)
  originalPrice Decimal?    @db.Decimal(10, 2)
  imageUrl      String?
  rating        Decimal?    @db.Decimal(3, 2)
  reviewCount   Int         @default(0)
  isBestseller  Boolean     @default(false)
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cartItems     CartItem[]
  orderItems    OrderItem[]
}

model Booking {
  id         String           @id @default(uuid())
  name       String
  mobile     String
  email      String
  gst        String?
  paxCount   Int
  attendants Int?
  toilets    Int?
  location   String?
  startDate  DateTime
  endDate    DateTime
  startTime  String?
  endTime    String?
  createdAt  DateTime         @default(now())
  services   BookingService[]
  events     BookingEvent[]
}

model BookingService {
  bookingId String
  serviceId String
  booking   Booking @relation(fields: [bookingId], references: [id])
  service   Service @relation(fields: [serviceId], references: [id])

  @@id([bookingId, serviceId])
}

model BookingEvent {
  bookingId   String
  eventTypeId String
  booking     Booking   @relation(fields: [bookingId], references: [id])
  eventType   EventType @relation(fields: [eventTypeId], references: [id])

  @@id([bookingId, eventTypeId])
}

model Cart {
  id        String     @id @default(uuid())
  userId    String?
  sessionId String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  items     CartItem[]
  order     Order?
}

model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  cart      Cart     @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])

  @@unique([cartId, productId])
}

model Order {
  id            String      @id @default(uuid())
  cartId        String      @unique
  customerName  String
  customerEmail String
  customerPhone String
  totalAmount   Decimal     @db.Decimal(10, 2)
  status        OrderStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  cart          Cart        @relation(fields: [cartId], references: [id])
  items         OrderItem[]
}

model OrderItem {
  id        String   @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id])
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
